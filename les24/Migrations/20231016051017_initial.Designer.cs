// <auto-generated />
using CinemaTheater.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CinemaTheater.Migrations
{
    [DbContext(typeof(CinemaTheaterDbContext))]
    [Migration("20231016051017_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CinemaTheater.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Director")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Style")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.",
                            Director = "Frank Darabont",
                            Name = "The Shawshank Redemption",
                            Style = "Drama"
                        },
                        new
                        {
                            Id = 2,
                            Description = "The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.",
                            Director = "Francis Ford Coppola",
                            Name = "The Godfather",
                            Style = "Crime, Drama"
                        },
                        new
                        {
                            Id = 3,
                            Description = "When the menace known as The Joker emerges from his mysterious past, he wreaks havoc and chaos on the people of Gotham.",
                            Director = "Christopher Nolan",
                            Name = "The Dark Knight",
                            Style = "Action, Crime, Drama"
                        },
                        new
                        {
                            Id = 4,
                            Description = "The lives of two mob hitmen, a boxer, a gangster and his wife, and a pair of diner bandits intertwine in four tales of violence and redemption.",
                            Director = "Quentin Tarantino",
                            Name = "Pulp Fiction",
                            Style = "Crime, Drama"
                        },
                        new
                        {
                            Id = 5,
                            Description = "The presidencies of Kennedy and Johnson, the events of Vietnam, Watergate, and other historical events unfold through the perspective of an Alabama man with an IQ of 75.",
                            Director = "Robert Zemeckis",
                            Name = "Forrest Gump",
                            Style = "Drama, Romance"
                        },
                        new
                        {
                            Id = 6,
                            Description = "A computer programmer who discovers that reality as he knows it is a simulation created by machines to subjugate humanity.",
                            Director = "The Wachowskis",
                            Name = "The Matrix",
                            Style = "Action, Sci-Fi"
                        },
                        new
                        {
                            Id = 7,
                            Description = "A thief who enters the dreams of others to obtain information is tasked with planting an idea into the mind of a CEO.",
                            Director = "Christopher Nolan",
                            Name = "Inception",
                            Style = "Action, Adventure, Sci-Fi"
                        },
                        new
                        {
                            Id = 8,
                            Description = "A young hobbit, Frodo, who has been entrusted with an ancient ring, must journey to Mount Doom to destroy it.",
                            Director = "Peter Jackson",
                            Name = "The Lord of the Rings: The Fellowship of the Ring",
                            Style = "Action, Adventure, Drama"
                        },
                        new
                        {
                            Id = 9,
                            Description = "The early life and career of Vito Corleone in 1920s New York is portrayed while his son, Michael, expands and tightens his grip on the family crime syndicate.",
                            Director = "Francis Ford Coppola",
                            Name = "The Godfather: Part II",
                            Style = "Crime, Drama"
                        },
                        new
                        {
                            Id = 10,
                            Description = "In German-occupied Poland during World War II, Oskar Schindler gradually becomes concerned for his Jewish workforce after witnessing their persecution by the Nazis.",
                            Director = "Steven Spielberg",
                            Name = "Schindler's List",
                            Style = "Biography, Drama, History"
                        });
                });

            modelBuilder.Entity("CinemaTheater.Models.MovieShow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MovieId")
                        .HasColumnType("INT");

                    b.Property<int>("ShowId")
                        .HasColumnType("INT");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("ShowId");

                    b.ToTable("MovieShows");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MovieId = 1,
                            ShowId = 1
                        },
                        new
                        {
                            Id = 2,
                            MovieId = 2,
                            ShowId = 1
                        },
                        new
                        {
                            Id = 3,
                            MovieId = 2,
                            ShowId = 2
                        },
                        new
                        {
                            Id = 4,
                            MovieId = 3,
                            ShowId = 3
                        },
                        new
                        {
                            Id = 5,
                            MovieId = 3,
                            ShowId = 4
                        },
                        new
                        {
                            Id = 6,
                            MovieId = 4,
                            ShowId = 5
                        },
                        new
                        {
                            Id = 7,
                            MovieId = 5,
                            ShowId = 6
                        },
                        new
                        {
                            Id = 8,
                            MovieId = 6,
                            ShowId = 1
                        },
                        new
                        {
                            Id = 9,
                            MovieId = 7,
                            ShowId = 3
                        },
                        new
                        {
                            Id = 10,
                            MovieId = 8,
                            ShowId = 4
                        },
                        new
                        {
                            Id = 11,
                            MovieId = 8,
                            ShowId = 6
                        },
                        new
                        {
                            Id = 12,
                            MovieId = 9,
                            ShowId = 2
                        },
                        new
                        {
                            Id = 13,
                            MovieId = 9,
                            ShowId = 5
                        },
                        new
                        {
                            Id = 14,
                            MovieId = 10,
                            ShowId = 1
                        },
                        new
                        {
                            Id = 15,
                            MovieId = 10,
                            ShowId = 3
                        });
                });

            modelBuilder.Entity("CinemaTheater.Models.Show", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ShowTime")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.ToTable("Shows");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ShowTime = "11"
                        },
                        new
                        {
                            Id = 2,
                            ShowTime = "13"
                        },
                        new
                        {
                            Id = 3,
                            ShowTime = "15"
                        },
                        new
                        {
                            Id = 4,
                            ShowTime = "17"
                        },
                        new
                        {
                            Id = 5,
                            ShowTime = "19"
                        },
                        new
                        {
                            Id = 6,
                            ShowTime = "21"
                        });
                });

            modelBuilder.Entity("CinemaTheater.Models.MovieShow", b =>
                {
                    b.HasOne("CinemaTheater.Models.Movie", "Movie")
                        .WithMany("MovieShows")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CinemaTheater.Models.Show", "Show")
                        .WithMany("MovieShows")
                        .HasForeignKey("ShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Show");
                });

            modelBuilder.Entity("CinemaTheater.Models.Movie", b =>
                {
                    b.Navigation("MovieShows");
                });

            modelBuilder.Entity("CinemaTheater.Models.Show", b =>
                {
                    b.Navigation("MovieShows");
                });
#pragma warning restore 612, 618
        }
    }
}
